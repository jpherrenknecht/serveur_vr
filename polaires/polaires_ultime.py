# Source
# # # http://toxcct.free.fr/polars/generator.htm
# # # http://toxcct.free.fr/polars/help/csvgen_input.htm
# # # pour obtenir les donnees brutes dans vr dashboard raw values reperer la ligne et la copier
# copies des donnees brutes - retirer tWA TWS le replacer par 0, remplacer les , par des , - ajouter   : ],[ à la fin de chaque ligne, polaires=np.array([[ au debut et ]])

from scipy.interpolate import RegularGridInterpolator,interp2d,interpn
import  numpy  as np
# angle mini au près 36°
# angle maxi au var 160°
angle_twa_pres = 40    # angle mini de remontee au vent
angle_twa_ar = 20       # angle mini par rappport au vent arriere
angle_pres = 36
angle_var = 20

#definition des graduations sur les axes x y
x1=np.array([0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,35,40,50,60,70])   #les vents
y1=np.array([0,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100,105,110,115,120,125,130,135,140,145,150,155,160,170,180])  # les twa


polaires=np.array([[

0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[
0,2.487,4.844,6.8,8.114,8.245,9.157,9.549,9.689,9.819,9.93,10.06,10.19,10.311,10.311,10.441,10.441,10.231,9.87,8.606,7.573],[
0,2.879,6.018,8.375,9.95,10.08,11.384,11.645,11.906,12.036,12.247,12.377,12.638,12.768,12.768,12.889,13.019,12.768,12.297,10.692,9.388],[
0,3.661,7.332,10.211,12.036,12.437,13.871,14.263,14.523,14.784,14.955,15.216,15.346,15.476,15.597,15.727,15.857,15.536,14.985,13.019,11.534],[
0,4.052,8.114,11.123,12.828,13.089,14.393,14.915,15.316,15.707,15.727,15.988,16.118,16.369,16.499,16.63,16.88,16.56,15.958,13.831,12.207],[
0,4.323,8.766,11.775,12.828,13.611,14.915,15.577,15.968,16.359,16.499,16.76,17.011,17.272,17.402,17.793,18.174,17.813,17.171,14.874,13.23],[
0,4.584,9.418,12.437,13.089,14.132,15.577,15.968,16.62,17.011,17.141,17.402,17.924,18.174,18.435,18.816,19.458,19.077,18.395,15.918,14.132],[
0,4.844,9.819,12.959,13.611,14.523,15.968,16.62,17.141,17.532,17.793,18.174,18.566,18.947,19.458,19.849,20.752,20.341,19.619,16.971,15.045],[
0,5.075,10.02,13.27,14.042,14.824,16.259,17.041,17.552,18.214,18.616,19.207,19.719,20.231,20.752,21.274,22.557,22.106,21.314,18.475,16.399],[
0,5.316,10.371,13.47,14.253,15.165,16.84,17.362,18.144,18.786,19.548,20.1,20.882,21.404,22.166,22.688,24.493,24.012,23.139,20.1,17.753],[
0,5.446,10.491,13.731,14.764,15.546,17.17,18.23,19.029,19.95,20.727,21.505,22.088,22.876,23.541,24.328,26.303,25.276,24.363,21.153,18.656],[
0,5.567,10.752,13.861,15.546,15.807,17.501,18.837,20.08,21.019,21.947,22.73,23.512,24.273,25.066,26.005,28.154,26.539,25.576,22.196,19.679],[
0,5.567,10.752,13.992,15.807,16.449,17.754,19.237,20.612,21.833,23.022,23.94,24.993,25.901,26.537,27.351,29.218,27.542,26.549,23.019,20.361],[
0,5.567,10.752,13.992,15.938,16.971,18.289,19.771,21.154,22.636,23.96,25.15,26.339,27.121,27.883,28.55,30.303,28.565,27.532,23.942,21.143],[
0,5.446,10.491,13.861,15.807,17.232,18.542,20.161,21.968,23.439,24.91,25.953,27.017,27.789,28.3,28.686,30.97,28.305,27.292,23.711,20.923],[
0,5.316,10.371,13.47,15.546,17.362,18.674,20.428,22.5,24.127,25.713,26.766,27.82,28.331,28.707,29.093,31.106,28.305,27.292,23.711,20.923],[
0,5.055,9.98,13.35,15.677,17.232,18.805,20.562,22.771,24.388,26.109,26.902,27.82,28.456,29.103,29.635,31.367,29.308,28.265,24.523,21.705],[
0,4.804,9.719,13.35,15.807,16.971,18.805,20.696,23.178,24.931,26.516,27.038,27.82,28.456,29.374,30.292,32.316,30.461,29.358,25.456,22.507],[
0,4.714,9.689,13.29,15.546,16.971,18.674,20.829,23.178,24.795,26.381,27.173,28.216,29.124,30.052,31.085,33.38,31.464,30.331,26.259,23.3],[
0,4.714,9.418,13.089,15.577,17.242,18.542,20.829,23.178,24.659,26.245,27.444,28.623,29.812,30.845,31.888,34.319,32.347,31.183,27.081,23.972],[
0,4.453,8.897,12.698,15.185,17.011,18.734,21.168,23.178,24.659,26.245,27.57,28.759,30.073,31.252,32.431,35.268,33.239,32.036,27.783,24.543],[
0,4.323,8.505,12.036,14.654,16.62,18.734,21.178,23.408,24.91,26.245,27.705,29.02,30.48,31.648,32.973,36.061,33.992,32.768,28.355,25.105],[
0,3.922,7.723,11.254,13.871,15.837,17.804,20.367,22.865,24.367,26.433,27.956,29.426,30.741,32.055,33.369,37.302,35.255,33.982,29.518,26.118],[
0,3.661,7.202,10.471,13.089,15.185,17.016,19.299,22.323,23.814,26.537,28.018,29.635,30.97,32.326,33.651,38.877,36.64,35.326,30.682,27.141],[
0,3.139,6.54,9.418,11.906,14.132,15.964,17.953,20.549,22.458,24.941,27.079,29.353,31.231,32.848,34.454,38.616,36.399,35.085,30.451,26.921],[
0,2.879,5.757,8.505,11.123,13.22,15.034,17.019,19.058,21.227,23.595,26.276,29.093,31.367,33.38,35.393,38.345,36.138,34.834,30.22,26.69],[
0,2.618,5.236,7.593,10.08,12.036,14.114,15.95,17.827,19.736,21.582,24.002,26.537,28.957,30.97,33.244,37.803,35.637,34.353,29.749,26.359],[
0,2.357,4.584,6.941,9.157,11.254,13.194,15.006,16.878,18.505,19.705,22.125,24.534,26.819,29.093,31.231,37.135,35.005,33.741,29.288,25.897],[
0,2.096,4.323,6.54,8.636,10.471,12.166,13.611,15.185,16.62,17.793,19.849,21.785,23.982,25.918,27.974,33.129,32.477,30.551,27.201,23.972],[
0,1.966,4.193,6.148,8.245,10.08,11.645,13.089,14.523,15.837,17.011,18.947,21.013,22.939,25.005,26.81,31.966,31.334,27.402,25.627,23.179]])














# ************************************************Fonctions   **********************************************************

def twa(cap, dvent):
    twa = 180 - abs(((360 - dvent + cap) % 360) - 180)
    return twa


def polaire(polaires, vit_vent, twa): # polaire simple
    donnees= [twa, vit_vent]
    valeur = interpn((y1, x1), polaires, donnees, method='linear')
    return valeur



def polaire2_vect(polaires,vit_vent,angle_vent,tableau_caps):
    #transformation tableau de caps en un point en tableau de donnees (twa , vit_vent)
    donnees = np.zeros((len(tableau_caps),2))
    for k in range(len(tableau_caps)):
        twa = 180 - abs(((360 - angle_vent + tableau_caps[k]) % 360) - 180)
        donnees[k]=[twa,vit_vent]
    valeurs = interpn((y1, x1), polaires, donnees, method='linear')
    return valeurs

def polaire3_vect(polaires,TWS,TWD,HDG):
    '''Retourne un tableau de polaires en fonction des polaires bateau  de TWS TWD et HDG'''
    '''TWS true Wind speed, TWD true wind direction , HDG caps'''
    '''Les trois tableaux doivent avoir la meme dimension'''
    TWA=(180 - np.abs(((360 - TWD + HDG) % 360) - 180)).reshape((-1, 1))
    TWS2=TWS.reshape((-1, 1))
    donnees=np.concatenate((TWA,TWS2),axis=1)
    valeurs = interpn((y1, x1), polaires, donnees, method='linear')
    return valeurs

if __name__ == '__main__':
    print(x1.shape)
    print(y1.shape)
    print(polaires.shape)

    tws=12
    twd=150


    HDG = np.array([100, 101, 102])  # caps
    res4 = polaire2_vect(polaires, tws, twd, HDG)
    print('polaires calculees 4 ', res4)




    HDG=np.array([100,101,102])   #caps
    TWD=np.array([150,150,150])   #direction vent
    TWS=np.array([12,12,12])      #vitesse vent
    res=polaire3_vect(polaires, TWS, TWD, HDG)

    print('polaires calculees 3',res)

    print()




    vit_vent = 10.5
    angle_vent = 0
    #cap = 160
    caps = np.array([140, 141, 142,143])
    res = polaire2_vect(polaires, vit_vent, angle_vent, caps)

    print ('Vitesse du vent {} noeuds , angle du vent {}° ' .format(vit_vent,angle_vent))
    print ('caps :', caps)
    print('Polaires',res)


    vit1=np.array([10.49,10.49,10.49])
    ang1=np.array([0,0,0])
    caps = np.array([140.7, 140.7, 140.7])
    res2=polaire3_vect(polaires, vit1, ang1, caps)
    print('Polaires avec p3',res2)



    print ('\nVersion simple')
    cap=142
    twa = 180 - abs(((360 - angle_vent + cap) % 360) - 180)
    res = polaire(polaires, vit_vent, twa)

    print ('Vitesse du vent {} noeuds , angle du vent {}° ' .format(vit_vent,angle_vent))
    print ('caps :', cap)
    print('Polaire',res)